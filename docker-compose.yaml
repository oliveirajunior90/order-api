services:
  db:
    image: postgres
    networks:
      - app_net
    restart: always
    environment:
      POSTGRES_DB: ordercontrol
      POSTGRES_USER: order
      POSTGRES_PASSWORD: order
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          cpus: "0.56"
          memory: "410MB"

  zookeeper:
    networks:
      - app_net
    image: zookeeper:3.6.3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  kafka:
    image: wurstmeister/kafka:2.12-2.2.1
    networks:
      - app_net
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "stock-control-order-v1:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  nginx:
    image: nginx:latest
    networks:
      - app_net
    ports:
      - "9999:9999"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api01
      - api02
    deploy:
      resources:
        limits:
          cpus: "0.17"
          memory: "10MB"

  api01: &api
    networks:
      - app_net
    build:
      dockerfile: ./Dockerfile
      context: .
    hostname: api01
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_PROFILES_ACTIVE: dev
      SERVER_PORT: 8001
      DB_HOST: db
      DB_USERNAME: order
      DB_PASSWORD: order
      DB_DATABASE: ordercontrol
    depends_on:
      - "db"
    deploy:
      resources:
        limits:
          cpus: "0.6"
          memory: "200MB"

  api02:
    <<: *api
    hostname: api02
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_PROFILES_ACTIVE: dev
      SERVER_PORT: 8002
      DB_HOST: db
      DB_USERNAME: order
      DB_PASSWORD: order
      DB_DATABASE: ordercontrol


volumes:
  db_data:

networks:
  app_net:
